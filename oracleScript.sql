CREATE SEQUENCE users_seq START WITH 1;
CREATE TABLE USERS
(
  USER_ID NUMBER(10,0) PRIMARY KEY,
  FIRST_NAME VARCHAR(50),
  LAST_NAME VARCHAR(50),
  LOGIN VARCHAR(32),
  PASSWORD VARCHAR(128)
);
-- TRIGGERY AUTONUMERUJACE
CREATE OR REPLACE TRIGGER users_trigger
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
  SELECT users_seq.NEXTVAL
  INTO :new.user_id
  FROM DUAL;
END;
CREATE OR REPLACE TRIGGER authors_trigger
BEFORE INSERT ON AUTHORS
FOR EACH ROW
BEGIN
  SELECT authors_seq.NEXTVAL
  INTO :new.author_id
  FROM DUAL;
END;
CREATE OR REPLACE TRIGGER books_trigger
BEFORE INSERT ON BOOKS
FOR EACH ROW
BEGIN
  SELECT books_seq.NEXTVAL
  INTO :new.book_id
  FROM DUAL;
END;
CREATE OR REPLACE TRIGGER clients_trigger
BEFORE INSERT ON CLIENTS
FOR EACH ROW
BEGIN
  SELECT clients_seq.NEXTVAL
  INTO :new.client_id
  FROM DUAL;
END;
CREATE OR REPLACE TRIGGER loans_trigger
BEFORE INSERT ON LOAN
FOR EACH ROW
BEGIN
  SELECT loans_seq.NEXTVAL
  INTO :new.loan_id
  FROM DUAL;
END;
-- DANE TESTOWE
INSERT INTO AUTHORS (FIRST_NAME,LAST_NAME) VALUES ('Adam','Mickiewicz');
INSERT INTO AUTHORS (FIRST_NAME,LAST_NAME) VALUES ('Juliusz','Slowacki');
INSERT INTO AUTHORS (FIRST_NAME,LAST_NAME) VALUES ('Fiodor','Dostojewski');
INSERT INTO AUTHORS (FIRST_NAME,LAST_NAME) VALUES ('Cyprian Kamil','Norwid');
INSERT INTO USERS (FIRST_NAME,LAST_NAME,LOGIN,PASSWORD) VALUES ('Adam','Adamski','AAdamski','ABC123');
INSERT INTO USERS (FIRST_NAME,LAST_NAME,LOGIN,PASSWORD) VALUES ('Bartosz','Bartkowski','BBartkowski','BBB222');
INSERT INTO USERS (FIRST_NAME,LAST_NAME,LOGIN,PASSWORD) VALUES ('Cezary','Czarkowski','CCzarkowski','CCC333');
--sprawdz id autora przed wstawieniem ksiazek ->
INSERT INTO BOOKS (AUTHOR_ID,ISBN,TITLE) VALUES (21,'212121','Ksiega dżungli');
INSERT INTO BOOKS (AUTHOR_ID,ISBN,TITLE) VALUES (22,'323211','Pan Tadeusz');
INSERT INTO BOOKS (AUTHOR_ID,ISBN,TITLE) VALUES (23,'123111','Kordian');
INSERT INTO BOOKS (AUTHOR_ID,ISBN,TITLE) VALUES (24,'223114','Zbrodnia i kara');
INSERT INTO BOOKS (AUTHOR_ID,ISBN,TITLE) VALUES (25,'234234','Wiersz wybrane');
INSERT INTO CLIENTS(FIRST_NAME,LAST_NAME,GENDER,DATE_OF_BIRTH) VALUES('Daniel','Danielski','M',TO_DATE('11/11/1991','DD/MM/YYYY'));
INSERT INTO CLIENTS(FIRST_NAME,LAST_NAME,GENDER,DATE_OF_BIRTH) VALUES('Ewelina','Ewelinowicz','M',TO_DATE('22/12/1991','DD/MM/YYYY'));
INSERT INTO CLIENTS(FIRST_NAME,LAST_NAME,GENDER,DATE_OF_BIRTH) VALUES('Franek','Frankowski','M',TO_DATE('09/09/1989','DD/MM/YYYY'));
INSERT INTO CLIENTS(FIRST_NAME,LAST_NAME,GENDER,DATE_OF_BIRTH) VALUES('Gabriel','Gabrielski','M',TO_DATE('10/10/1990','DD/MM/YYYY'));
-- FUNKCJE

CREATE OR REPLACE FUNCTION USERLOGIN (LoginU USERS.LOGIN%TYPE, PasswordU USERS.PASSWORD%TYPE)
RETURN VARCHAR
AS
USERNAME VARCHAR(50);
BEGIN
 begin    
  SELECT FIRST_NAME || ' ' || LAST_NAME
  INTO username
  FROM USERS
  WHERE LOGIN = LoginU AND PASSWORD = PasswordU;
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
        USERNAME := NULL;
 end;
 
 if USERNAME IS NULL THEN
    return null;
 else return USERNAME;   
 end if;
END USERLOGIN;

select system.userlogin('AAdamski','ABC1231') from dual;

-- WIDOKI
CREATE OR REPLACE VIEW WYPOZYCZENIA_CZYTELNIKOW
AS
  SELECT C.FIRST_NAME,
         C.LAST_NAME,
         C.GENDER,
         C.DATE_OF_BIRTH,
         B.ISBN,
         B.TITLE,
         A.FIRST_NAME AS AUTORIMIE,
         A.LAST_NAME AS AUTORNAZWISKO
  FROM CLIENTS C
  JOIN LOANS L ON L.CLIENT_ID = C.CLIENT_ID
  JOIN BOOKS B ON B.BOOK_ID = L.BOOK_ID
  JOIN AUTHORS A ON A.AUTHOR_ID = B.AUTHOR_ID; 
  
CREATE OR REPLACE VIEW KSIAZKI_AUTORA
AS
  SELECT A.AUTHOR_ID,
         A.FIRST_NAME,
         A.LAST_NAME,
         B.TITLE,
         B.ISBN,
         B.BOOKCOUNT,
         B.BOOK_ID
  FROM AUTHORS A
  JOIN BOOKS B ON B.AUTHOR_ID = A.AUTHOR_ID;
-- TRIGGERY
-- trigger do dodawania nowych ksiazek autora 
CREATE OR REPLACE TRIGGER KSIAZKI_AUTORA_TRIGGER
INSTEAD OF INSERT ON KSIAZKI_AUTORA
FOR EACH ROW
BEGIN
-- dodajemy dane książki
  INSERT INTO BOOKS(AUTHOR_ID, ISBN, TITLE, BOOKCOUNT)
  VALUES (:new.AUTHOR_ID,:new.ISBN,:new.TITLE, :new.BOOKCOUNT);
END KSIAZKI_AUTORA_TRIGGER;
-- trigger do updateowania ksiazek autora
CREATE OR REPLACE TRIGGER KSIAZKI_AUTORA_UPDATE_TRIGGER
INSTEAD OF UPDATE ON KSIAZKI_AUTORA
FOR EACH ROW
DECLARE
  AUTHORID AUTHORS.AUTHOR_ID%TYPE;
  BOOKID BOOKS.BOOK_ID%TYPE;
BEGIN
--sprawdzam czy mam autora o tych danych
  SELECT AUTHOR_ID INTO AUTHORID
  FROM AUTHORS
  WHERE FIRST_NAME = :new.FIRST_NAME AND LAST_NAME = :new.LAST_NAME; 
-- jesli nie mam to dodaje nowego autora a potem ksiazke
  IF AUTHORID IS NULL
  THEN 
    INSERT INTO AUTHORS (FIRST_NAME,LAST_NAME) VALUES (:new.FIRST_NAME,:new.LAST_NAME)
    RETURNING AUTHOR_ID INTO AUTHORID;
-- w przeciwnym wypadku aktualizuje autora
  ELSE
    UPDATE AUTHORS
    SET FIRST_NAME = :new.FIRST_NAME,
        LAST_NAME = :new.LAST_NAME
    WHERE AUTHOR_ID = AUTHORID;
  END IF;
    UPDATE BOOKS
    SET ISBN = :new.ISBN,
        TITLE = :new.TITLE
    WHERE ISBN = :old.ISBN AND TITLE = :old.TITLE;
END KSIAZKI_AUTORA_UPDATE_TRIGGER;
-- robiąc delete na triggerze wykonywac bedzie sie to
CREATE OR REPLACE TRIGGER KSIAZKI_AUTORA_DELETE_TRIGGER
  INSTEAD OF DELETE ON KSIAZKI_AUTORA
  FOR EACH ROW
  DECLARE 
    BOOK_COUNT NUMBER;
    IDAUTORA AUTHORS.AUTHOR_ID%TYPE;
    IDKSIAZKI BOOKS.BOOK_ID%TYPE;
BEGIN
-- pobieram identyfikator ksiazki ktora chce usunac
  SELECT BOOK_ID INTO IDKSIAZKI
  FROM BOOKS 
  WHERE TITLE = :old.TITLE AND ISBN = :old.ISBN;
-- pobieram identyfikator autora ktorego dotyczy usuwanie
  SELECT AUTHOR_ID INTO IDAUTORA
  FROM AUTHORS
  WHERE FIRST_NAME = :old.FIRST_NAME AND LAST_NAME = :old.LAST_NAME;
-- usuwam ksiazke z tabeli books
  DELETE FROM BOOKS 
  WHERE BOOK_ID = IDKSIAZKI;
-- pobieram liczbe ksiazek ktore w tym momencie ma autor usuwanego wiersza
  SELECT COUNT(BOOK_ID) INTO BOOK_COUNT
  FROM BOOKS
  WHERE AUTHOR_ID = IDAUTORA;
-- jezeli autor po usunieciu ksiazki nie ma juz ani jednej to usuwamy rowniez jego
  IF BOOK_COUNT = 0
  THEN 
    DELETE FROM AUTHORS
    WHERE AUTHOR_ID = IDAUTORA;
  END IF;
END KSIAZKI_AUTORA_USUN_TRIGGER;
  
  
  CREATE OR REPLACE VIEW KSIAZKI_AUTORA
AS
  SELECT A.FIRST_NAME,
         A.LAST_NAME,
         A.AUTHOR_ID,
         B.TITLE,
         B.ISBN,
         B.BOOK_ID
  FROM AUTHORS A
  JOIN BOOKS B ON B.AUTHOR_ID = A.AUTHOR_ID;

CREATE OR REPLACE PROCEDURE DOKONAJ_ZWROTU (LoanID LOANS.LOAN_ID%TYPE)
AS 
BEGIN
  DELETE FROM LOANS l
  WHERE l.LOAN_ID = LoanID;
END DOKONAJ_ZWROTU;

SELECT b.TITLE,c.FIRST_NAME || ' ' || c.LAST_NAME as NAME
FROM Books b, Clients c, Loans l
WHERE b.BOOK_ID = l.BOOK_ID AND c.CLIENT_ID = l.CLIENT_ID;